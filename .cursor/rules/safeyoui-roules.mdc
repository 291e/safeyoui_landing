---
alwaysApply: true
---
# 1. Core Principles

- **TypeScript only** (No JS files allowed)
- **Functional components only** (No class components)
- **No `any` type** (If inevitable, leave a TODO and refactor later)
- **camelCase** naming convention for all files, folders, functions, variables, and components

---

# 2. Folder Structure

/pages # Routing management
/components # Only shared UI components (e.g., Button, Modal)
/features # Feature(domain)-based folders. Create components/hooks/api/types folders as needed inside
/hooks # Only shared hooks (e.g., useAuth, useWindowSize)
/styles # Global styles, Tailwind configuration, etc.
/lib, /utils # Global utility functions
/types # Global types
/public # Static files

> **Note:** Feature-specific hooks, types, and api files must be managed inside the respective feature folder.

---

# 3. Code Quality Tools

- **ESLint** & **Prettier** are mandatory
- **pre-commit hook** (e.g., husky, lint-staged) must enforce auto-formatting/linting
- Using `any` type requires code review
- **shadcn/ui, framer-motion, Tailwind CSS** as base UI libraries
- Must follow official documentation and best practices

---

# 4. API & State Management

- Use **Next.js API Routes**
  - Use `fetch` by default; discuss with the team if additional libraries are needed
- **zustand** for state management (discuss before adopting other libraries)
- SWR, react-query, etc. can be introduced after team discussion

---

# 5. Environment Variables & Secrets

- Use **.env** (never commit to version control)
- **.env.example** must always be up-to-date and shared
- Protect secrets and keys using .gitignore

---

# 6. Commit/PR/Deployment

- **Commit messages**: Free format, but must be clear and task-based
- **PR/Code review**: Detailed rules to be discussed and introduced later
- **Deployment**: Detailed rules to be discussed and introduced later

---

# 7. Storybook

- **Storybook is mandatory**
- All UI components must have a Storybook story
- New components/design system elements must have a Story file

---

# 9. Communication

- **All communication, code comments, PR discussions, documentation, and commit messages must be in Korean.**


---